library(devtools)
library(roxygen2)
document()
use_mit_license()
library(devtools)
document()
check_win_devel()
library(gamblers.ruin.gameplay)
document()
library(gamblers.ruin.gameplay)
document()
library(gamblers.ruin.gameplay)
grp.gameplay(5,0.5,20)
install.packages("caTools")
library(caTools)
grp.gameplay = function(ini.stake,p,win.amt)
{
# ini.stake :: The Initial Stake with which the gambler enters the game.
# p :: win probability for each round for the gambler, 0<p<1.
# win.amt :: The amount the gambler wants to win from the game utlimately.
round.money = array(dim=1) # Money with the gambler in each round of the game.
round.money[1] = ini.stake # Storing the money for the first round, which is
# indeed the initial capital.
ct = 1 # A counter keeping the position count of the array round.money[].
while(round.money[ct] > 0) # Until going broke
{
ct = ct + 1            # Number of Rounds being played.
if(rbinom(1,1,p) == 1) # The gambler wins the round.
{
round.money[ct] = round.money[ct-1] + 1
}else                  # The gambler loses the round.
{
round.money[ct] = round.money[ct-1] - 1
}
if(round.money[ct] == win.amt) # If the gambler reaches the winning amount,
# the gambler stops playing.
{
break
}
}
if(p == 0.5)   # The gambler playing a fair/unbiased game.
{
# Probability of winning the entire fair game.
win.prob = ini.stake/win.amt
}else          # The gambler playing a biased game.
{
# Probability of winning the entire biased game.
win.prob = (1-(((1-p)/p)^ini.stake))/(1-(((1-p)/p)^win.amt))
}
# A Data Frame for storing the data, which is to be plotted.
rounds = 1:ct
capital = round.money
df = data.frame(rounds, capital)
if(round.money[length(round.money)] == 0) # Ultimately losing the game
# ---> going broke.
{
p<-ggplot(df, aes(x = rounds,y = capital,color=capital)) +
theme_ipsum_rc() + ylab("Capital in Each Round") +
ggtitle(paste("Overall Probability of winning this entire game\nis ",win.prob
,"\nInitial stake as ",ini.stake,"; Winning Amount = ",win.amt,
"\nWin probability in each round is p = ",p,
"\nBut Sorry you lost! :( ",
"\nNumber Of Rounds Played = ",ct)) +
geom_line() + theme(legend.position="None") +
xlab("Rounds of the Game") + transition_reveal(df$rounds) +
scale_color_viridis(discrete = F) +
geom_point(size=4,color="#8E44AD")
}else  # Ultimately winning the game ---> acquiring the winning amount.
{
p<-ggplot(df, aes(x = rounds,y = capital,color=capital)) +
theme_ipsum_rc() + ylab("Capital in Each Round") +
ggtitle(paste("Overall Probability of winning this entire game\nis ",win.prob,
"\nInitial stake = ",ini.stake,"; Winning Amount = ",win.amt,
"\nWin probability in each round is p = ",p,
"\nCongratulations You Win! :) ",
"\nNumber Of Rounds Played = ",ct)) +
geom_line() + theme(legend.position="None") +
xlab("Rounds of the Game") + transition_reveal(df$rounds) +
scale_color_viridis(discrete = F) +
geom_point(size=4,color="#8E44AD")
}
p
}
write.gif(grp.gameplay(4,0.5,40),"sim.gif")
grp.gameplay = function(ini.stake,p,win.amt)
{
# ini.stake :: The Initial Stake with which the gambler enters the game.
# p :: win probability for each round for the gambler, 0<p<1.
# win.amt :: The amount the gambler wants to win from the game utlimately.
round.money = array(dim=1) # Money with the gambler in each round of the game.
round.money[1] = ini.stake # Storing the money for the first round, which is
# indeed the initial capital.
ct = 1 # A counter keeping the position count of the array round.money[].
while(round.money[ct] > 0) # Until going broke
{
ct = ct + 1            # Number of Rounds being played.
if(rbinom(1,1,p) == 1) # The gambler wins the round.
{
round.money[ct] = round.money[ct-1] + 1
}else                  # The gambler loses the round.
{
round.money[ct] = round.money[ct-1] - 1
}
if(round.money[ct] == win.amt) # If the gambler reaches the winning amount,
# the gambler stops playing.
{
break
}
}
if(p == 0.5)   # The gambler playing a fair/unbiased game.
{
# Probability of winning the entire fair game.
win.prob = ini.stake/win.amt
}else          # The gambler playing a biased game.
{
# Probability of winning the entire biased game.
win.prob = (1-(((1-p)/p)^ini.stake))/(1-(((1-p)/p)^win.amt))
}
# A Data Frame for storing the data, which is to be plotted.
rounds = 1:ct
capital = round.money
df = data.frame(rounds, capital)
if(round.money[length(round.money)] == 0) # Ultimately losing the game
# ---> going broke.
{
p<-ggplot(df, aes(x = rounds,y = capital,color=capital)) +
theme_ipsum_rc() + ylab("Capital in Each Round") +
ggtitle(paste("Overall Probability of winning this entire game\nis ",win.prob
,"\nInitial stake as ",ini.stake,"; Winning Amount = ",win.amt,
"\nWin probability in each round is p = ",p,
"\nBut Sorry you lost! :( ",
"\nNumber Of Rounds Played = ",ct)) +
geom_line() + theme(legend.position="None") +
xlab("Rounds of the Game") + transition_reveal(df$rounds) +
scale_color_viridis(discrete = F) +
geom_point(size=4,color="#8E44AD")
}else  # Ultimately winning the game ---> acquiring the winning amount.
{
p<-ggplot(df, aes(x = rounds,y = capital,color=capital)) +
theme_ipsum_rc() + ylab("Capital in Each Round") +
ggtitle(paste("Overall Probability of winning this entire game\nis ",win.prob,
"\nInitial stake = ",ini.stake,"; Winning Amount = ",win.amt,
"\nWin probability in each round is p = ",p,
"\nCongratulations You Win! :) ",
"\nNumber Of Rounds Played = ",ct)) +
geom_line() + theme(legend.position="None") +
xlab("Rounds of the Game") + transition_reveal(df$rounds) +
scale_color_viridis(discrete = F) +
geom_point(size=4,color="#8E44AD")
}
return(p)
}
write.gif(grp.gameplay(4,0.5,40),"sim.gif")
grp.gameplay(5,0.5,40)
document()
rm(list = c("grp.gameplay"))
document()
document()
library(gamblers.ruin.gameplay)
grp.gameplay(1500,0.5,2000)
library(devtools)
document()
library(gamblers.ruin.gameplay)
citation("YatesAlgo.FactorialExp.SR")
library(devtools)
document()
library(usethis)
use_package("ggplot2")
use_reference()
use_citation()
document()
library(gamblers.ruin.gameplay)
document()
library(gamblers.ruin.gameplay)
write.bib(REFERENCES, file='REFERENCES')
library(bibtex)
write.bib(REFERENCES, file='REFERENCES')
document()
library(gamblers.ruin.gameplay)
document()
library(gamblers.ruin.gameplay)
document()
library(gamblers.ruin.gameplay)
use_citation()
document()
library(gamblers.ruin.gameplay)
document()
library(gamblers.ruin.gameplay)
document()
library(gamblers.ruin.gameplay)
document()
library(gamblers.ruin.gameplay)
document()
library(gamblers.ruin.gameplay)
document()
library(gamblers.ruin.gameplay)
document()
library(gamblers.ruin.gameplay)
grp.gameplay = function(ini.stake,p,win.amt)
{
# ini.stake :: The Initial Stake with which the gambler enters the game.
# p :: win probability for each round for the gambler, 0<p<1.
# win.amt :: The amount the gambler wants to win from the game utlimately.
round.money = array(dim=1) # Money with the gambler in each round of the game.
round.money[1] = ini.stake # Storing the money for the first round, which is
# indeed the initial capital.
ct = 1 # A counter keeping the position count of the array round.money[].
while(round.money[ct] > 0) # Until going broke
{
ct = ct + 1            # Number of Rounds being played.
if(rbinom(1,1,p) == 1) # The gambler wins the round.
{
round.money[ct] = round.money[ct-1] + 1
}else                  # The gambler loses the round.
{
round.money[ct] = round.money[ct-1] - 1
}
if(round.money[ct] == win.amt) # If the gambler reaches the winning amount,
# the gambler stops playing.
{
break
}
}
if(p == 0.5)   # The gambler playing a fair/unbiased game.
{
# Probability of winning the entire fair game.
win.prob = ini.stake/win.amt
}else          # The gambler playing a biased game.
{
# Probability of winning the entire biased game.
win.prob = (1-(((1-p)/p)^ini.stake))/(1-(((1-p)/p)^win.amt))
}
# A Data Frame for storing the data, which is to be plotted.
rounds = 1:ct
capital = round.money
df = data.frame(rounds, capital)
if(round.money[length(round.money)] == 0) # Ultimately losing the game
# ---> going broke.
{
p<-ggplot(df, aes(x = rounds,y = capital,color=capital)) +
theme_ipsum_rc() + ylab("Capital in Each Round") +
ggtitle(paste("Overall Probability of winning this entire game\nis ",win.prob
,"\nInitial stake as ",ini.stake,"; Winning Amount = ",win.amt,
"\nWin probability in each round is p = ",p,
"\nBut Sorry you lost! :( ",
"\nNumber Of Rounds Played = ",ct)) +
geom_line() + theme(legend.position="None") +
xlab("Rounds of the Game") + transition_reveal(df$rounds) +
scale_color_viridis(discrete = F) +
geom_point(size=4,color="#8E44AD")
}else  # Ultimately winning the game ---> acquiring the winning amount.
{
p<-ggplot(df, aes(x = rounds,y = capital,color=capital)) +
theme_ipsum_rc() + ylab("Capital in Each Round") +
ggtitle(paste("Overall Probability of winning this entire game\nis ",win.prob,
"\nInitial stake = ",ini.stake,"; Winning Amount = ",win.amt,
"\nWin probability in each round is p = ",p,
"\nCongratulations You Win! :) ",
"\nNumber Of Rounds Played = ",ct)) +
geom_line() + theme(legend.position="None") +
xlab("Rounds of the Game") + transition_reveal(df$rounds) +
scale_color_viridis(discrete = F) +
geom_point(size=4,color="#8E44AD")
}
return(p)
}
grp.gameplay(5,10,0.5)
grp.gameplay(5,0.5,10)
get_wd()
getwd()
setwd(paste0(getwd(), "/Statistical Analysis"))
document()
rm(list = c("grp.gameplay"))
document()
check_win_devel()
library(testthat)
test_check("gamblers.ruin.gameplay")
document()
library(gamblers.ruin.gameplay)
document()
library(gamblers.ruin.gameplay)
chec_win_devel()
check_win_devel()
library(gamblers.ruin.gameplay)
